{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-practice-project1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/covidcasesdeaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_covid_sases_parquet",
								"type": "DatasetReference"
							},
							"name": "srccasesdeath"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Asis_covid_cases",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filteraisa",
							"description": "taking 'continent' asia rows"
						},
						{
							"name": "select1",
							"description": "select columns 'country, country_code, population, indicator, daily_count, date, source'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as string,",
						"          indicator as string,",
						"          daily_count as string,",
						"          date as string,",
						"          rate_14_day as string,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srccasesdeath",
						"srccasesdeath filter(continent == \"Asia\") ~> filteraisa",
						"filteraisa select(mapColumn(",
						"          each(match(true()),",
						"               'cases_' + $$  = $$)",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}